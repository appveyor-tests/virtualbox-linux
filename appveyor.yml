init:
    - appveyor version
    - sh: echo $APPVEYOR_BUILD_WORKER_CLOUD
    - sh: echo $APPVEYOR_BUILD_WORKER_IMAGE
    - sh: vboxmanage --version

install:
    - sh: |
        if [ ! -f "debian32.ova" ]; then
           wget -O "debian32.ova" https://netcologne.dl.sourceforge.net/project/debian32bitvbox/OVA-image/vm1%5B32bit%5D.ova
        fi
        VM=vm1
        #sudo /sbin/vboxconfig
        VBoxManage import "debian32.ova"
    # - sh: |
    #     if [ ! -f tinycore-2.1-x86.7z ]; then
    #       wget http://downloads.sourceforge.net/virtualboximage/tinycore-2.1-x86.7z
    #     fi
    #     7z x tinycore-2.1-x86.7z
    #     VM=tinycorelinux
    #     VBoxManage createvm --name $VM --ostype Linux26 --register
    #     VBoxManage storagectl $VM --name "SATA Controller" --add sata --controller IntelAHCI
    #     VBoxManage storageattach $VM --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium VDI/tinycore-2.1-x86.vdi
    #     VBoxManage modifyvm $VM --memory 1024 --vram 128


test_script:
    - sh: |
        vboxmanage modifyvm $VM --nictype1 Am79C973
        vboxmanage modifyvm $VM --cableconnected1 on
        vboxmanage modifyvm $VM --hwvirtex off
        vboxmanage modifyvm $VM --vtxvpid off
        vboxmanage modifyvm $VM --vrde on
        vboxmanage modifyvm $VM --vrdeport 3389
    - sh: |
        START_VM_RESULT=$(timeout 20s vboxmanage startvm $VM --type headless)
        if [[ "$START_VM_RESULT" =~ "successfully started" ]]; then 
            echo "VM successfully started";
        else
            echo "VM did not started!"
            exit 1
        fi
        if pgrep VBoxHeadless; then
            ps $(pgrep VBoxHeadless)
        else
            echo "VBoxHeadless did not started!"
            exit 2
        fi
        VM_PID=$(pgrep VBoxHeadless)
        if [[ $(ps $VM_PID) =~ $VM ]]; then 
            echo "Vboxmanage started VM we need ('$VM')";
        else
            echo "Vboxmanage started unknown VM!";
            exit 3
        fi
        VM_LSOF=$(sudo lsof -p $VM_PID)

        if grep ":3389 (LISTEN)" <<< "$VM_LSOF"; then 
            echo "VRDE port LISTENs"
        else
            echo "VRDE port not in use!";
            exit 4
        fi

        if grep -E "vdi|vmdk" <<< "$VM_LSOF"; then
            echo "VM uses vdi file"
        else
            echo "VM does not use vdi file!";
            exit 5
        fi
        # Tests are finished, turning of VM
        vboxmanage controlvm $VM poweroff

after_test:
    - sh: pwd
    - sh: ls -l ${APPVEYOR_BUILD_FOLDER}/*

build: off

cache:
    - ${APPVEYOR_BUILD_FOLDER}/*.ova
    - ${APPVEYOR_BUILD_FOLDER}/*.7z
